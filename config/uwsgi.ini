[uwsgi]
# 允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程
enable-threads = true

#bind to the specified UNIX/TCP socket using default protocol
socket = 127.0.0.1:15000

#enable the stats server on the specified address,use by-> uwsgitop hostname:3167
stats = 127.0.0.1:3167

#set PYTHONHOME/virtualenv
virtualenv = /home/luna/anaconda3/envs/alita 

#set environment variable
env = ALITA_CONFIG=../config/alita/prod.py

#load .wsgi file
wsgi-file = wsgi.py

#set default WSGI callable name,the default is “application”
callable = application

# 在每个worker而不是master中加载应用
lazy-apps=true  

# 启动主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程。
master = true

#spawn the specified number of workers/processes
processes = 1

#当服务器退出的时候自动删除unix socket文件和pid文件  
vacuum = true

#设置用于uwsgi包解析的内部缓存区大小为64k。默认是4k  
buffer-size = 32768

#设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束） 
reload-mercy = 8

#setuid to the specified user/uid
uid = luna

#setgid to the specified group/gid
gid = luna

#log requests slower than the specified number of milliseconds
log-slow = 100

#reload workers after the specified amount of managed requests
max-requests = 20000

#reload if rss memory is higher than specified megabytes
reload-on-rss = 256

#reload if address space is higher than specified megabytes
reload-on-as = 512

#set harakiri timeout
harakiri = 30

#enable verbose mode for harakiri
harakiri-verbose = true

#set the socket listen queue size
listen = 1024

#enable memory report
memory-report  = true

#serialize accept() usage (if possible)
thunder-lock = true

#指定pid文件
pidfile = /tmp/alita.pid

# 配置worker的运行引擎
gevent = 100
gevent-monkey-patch = true

#daemonize uWSGI and log to this file
#daemonize = /home/caokai/alita/logs/uwsgi-dev.log
#set advanced format for request logging

log-format = %(addr) - %(pid) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(hsize) %(rsize) "%(referer)" "%(uagent)" %(switches) %(micros)
